// Code generated by truss. DO NOT EDIT.
// Rerunning truss will overwrite this file.
// Version: 72999ebd2f
// Version Date: Wed Mar 17 08:36:51 UTC 2021

package svc

// This file provides server-side bindings for the gRPC transport.
// It utilizes the transport/grpc.Server.

import (
	"context"
	"net/http"

	"google.golang.org/grpc/metadata"

	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	pb "uas/user"
)

// MakeGRPCServer makes a set of endpoints available as a gRPC UserServer.
func MakeGRPCServer(endpoints Endpoints, options ...grpctransport.ServerOption) pb.UserServer {
	serverOptions := []grpctransport.ServerOption{
		grpctransport.ServerBefore(metadataToContext),
	}
	serverOptions = append(serverOptions, options...)
	return &grpcServer{
		// user

		information: grpctransport.NewServer(
			endpoints.InformationEndpoint,
			DecodeGRPCInformationRequest,
			EncodeGRPCInformationResponse,
			serverOptions...,
		),
	}
}

// grpcServer implements the UserServer interface
type grpcServer struct {
	information grpctransport.Handler
}

// Methods for grpcServer to implement UserServer interface

func (s *grpcServer) Information(ctx context.Context, req *pb.InformationRequest) (*pb.InformationResponse, error) {
	_, rep, err := s.information.ServeGRPC(ctx, req)
	if err != nil {
		return nil, err
	}
	return rep.(*pb.InformationResponse), nil
}

// Server Decode

// DecodeGRPCInformationRequest is a transport/grpc.DecodeRequestFunc that converts a
// gRPC information request to a user-domain information request. Primarily useful in a server.
func DecodeGRPCInformationRequest(_ context.Context, grpcReq interface{}) (interface{}, error) {
	req := grpcReq.(*pb.InformationRequest)
	return req, nil
}

// Server Encode

// EncodeGRPCInformationResponse is a transport/grpc.EncodeResponseFunc that converts a
// user-domain information response to a gRPC information reply. Primarily useful in a server.
func EncodeGRPCInformationResponse(_ context.Context, response interface{}) (interface{}, error) {
	resp := response.(*pb.InformationResponse)
	return resp, nil
}

// Helpers

func metadataToContext(ctx context.Context, md metadata.MD) context.Context {
	for k, v := range md {
		if v != nil {
			// The key is added both in metadata format (k) which is all lower
			// and the http.CanonicalHeaderKey of the key so that it can be
			// accessed in either format
			ctx = context.WithValue(ctx, k, v[0])
			ctx = context.WithValue(ctx, http.CanonicalHeaderKey(k), v[0])
		}
	}

	return ctx
}
